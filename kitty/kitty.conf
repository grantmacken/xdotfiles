include kanagawa.conf
single_instance yes
instance_group gmack
# start_as fullscreen
allow_remote_control yes
listen_on unix:@mykitty

env PROJECTS=~/projects/grantmacken
env TERM=xterm-kitty
#env NVIM_APPNAME=nvim
env NVIM_APPNAME=neovim

# https://sw.kovidgoyal.net/kitty/
#: Fonts {{{
# kitty list-fonts
#: kitty has very powerful font management. You can configure
#: individual font faces and even specify special fonts for particular
# Nerd IBM Plex Mono

font_family      BlexMono Nerd Font Mono
# font_family      Iosevka Mayukai Codepro
#font_family     Victor Mono
#
#bold_font        Blex Mono Bold
#italic_font      Blex Mono Italic
#bold_italic_font Blex Bold Italic
font_size 14.0
adjust_line_height  120%
adjust_column_width 0

map kitty_mod+D launch --type=tab --tab-title=dots --cwd=~/projects/grantmacken/dotfiles nvim README.md
map kitty_mod+T launch --type=tab --tab-title=treesiter --cwd=~/projects/grantmacken/tree-sitter-xquery nvim grammar.js
# map kitty_mod+T launch --type=tab --tab-title=website --cwd=~/projects/grantmacken/fluorescence make help
# map kitty_mod+C launch --type=tab --tab-title=xqerl-cli --cwd=~/projects/grantmacken/xqerl-cli make help
map kitty_mod+1 goto_tab 1
map kitty_mod+2 goto_tab 2
map kitty_mod+3 goto_tab 3
map kitty_mod+3 goto_tab 4
map kitty_mod+3 goto_tab 5
#:     map ctrl+alt+2 goto_tab 2
startup_session session.conf

# symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols
#
# kitty_mod ctrl+shift
# map kitty_mod+enter new_window
#:     map kitty_mod+y      new_window mutt
#: You can open a new window with the current working directory set to
#: the working directory of the current window using::

#:     map ctrl+alt+enter    new_window_with_cwd

#: You can open a new window that is allowed to control kitty via the
#: kitty remote control facility by prefixing the command line with @.
#: Any programs running in that window will be allowed to control
#: kitty. For example::

#:     map ctrl+enter new_window @ some_program

# map kitty_mod+n new_os_window
# map kitty_mod+w close_window
# map kitty_mod+] next_window
# map kitty_mod+[ previous_window
# map kitty_mod+f move_window_forward
# map kitty_mod+b move_window_backward
# map kitty_mod+` move_window_to_top
# map kitty_mod+r start_resizing_window
#
# map kitty_mod+f11    toggle_fullscreen
# map kitty_mod+u      kitten unicode_input
# map kitty_mod+f12     edit_config_file
# map kitty_mod+escape kitty_shell window
# map ctrl+alt+1  first_window
# map alt+shift+2  first_window
# map kitty_mod+f1 first_window
# map kitty_mod+f2 second_window
# map kitty_mod+f3 third_window
# map kitty_mod+4 fourth_window
# map kitty_mod+5 fifth_window
# map kitty_mod+6 sixth_window
# map kitty_mod+7 seventh_window
# map kitty_mod+8 eighth_window
# map kitty_mod+9 ninth_window
# map kitty_mod+0 tenth_window

#: }}}
#: Tab management {{{

# map kitty_mod+right next_tab
# map kitty_mod+left  previous_tab
# map kitty_mod+t     new_tab
# map kitty_mod+q     close_tab
# map kitty_mod+.     move_tab_forward
# map kitty_mod+,     move_tab_backward
# map kitty_mod+alt+t set_tab_title

#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab::

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and use
#: new_tab_with_cwd. Finally, if you want the new tab to open next to
#: the current tab rather than at the end of the tabs list, use::
#:     map ctrl+t new_tab !neighbor [optional cmd to run]
#: }}}
#: Layout management {{{

# map kitty_mod+l next_layout
# map kitty_mod+equal     change_font_size all +2.0
# map kitty_mod+minus     change_font_size all -2.0
# map kitty_mod+backspace change_font_size all 0
# map kitty_mod+e kitten hints
# map kitty_mod+p>f kitten hints --type path --program -
# map kitty_mod+p>shift+f kitten hints --type path
# map kitty_mod+p>l kitten hints --type line --program -
#: Open the kitty shell in a new window/tab/overlay/os_window to
#: control kitty using commands.

# map kitty_mod+a>m    set_background_opacity +0.1
# map kitty_mod+a>l    set_background_opacity -0.1
# map kitty_mod+a>1    set_background_opacity 1
# map kitty_mod+a>d    set_background_opacity default
# map kitty_mod+delete clear_terminal reset active

#: You can create shortcuts to clear/reset the terminal. For example::

#:     map kitty_mod+f9 clear_terminal reset active
#:     map kitty_mod+f10 clear_terminal clear active
#:     map kitty_mod+f11 clear_terminal scrollback active

#: These will reset screen/clear screen/clear screen+scrollback
#: respectively. If you want to operate on all windows instead of just
#: the current one, use all instead of :italic`active`.


#: You can tell kitty to send arbitrary (UTF-8) encoded text to the
#: client program when pressing specified shortcut keys. For example::

#:     map ctrl+alt+a send_text all Special text

#: This will send "Special text" when you press the ctrl+alt+a key
#: combination.  The text to be sent is a python string literal so you
#: can use escapes like \x1b to send control codes or \u21fb to send
#: unicode characters (or you can just input the unicode characters
#: directly as UTF-8 text). The first argument to send_text is the
#: keyboard modes in which to activate the shortcut. The possible
#: values are normal or application or kitty or a comma separated
#: combination of them.  The special keyword all means all modes. The
#: modes normal and application refer to the DECCKM cursor key mode
#: for terminals, and kitty refers to the special kitty extended
#: keyboard protocol.

#: Another example, that outputs a word and then moves the cursor to
#: the start of the line (same as pressing the Home key)::

#:     map ctrl+alt+a send_text normal Word\x1b[H
#:     map ctrl+alt+a send_text application Word\x1bOH

#: }}}

# }}}
